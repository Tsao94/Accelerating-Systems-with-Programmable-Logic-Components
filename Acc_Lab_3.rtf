{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 module KeyPad(output [15:0] last4,\
              input [3:0] key,\
              input pressed,\
              input clk);\
reg [15:0]previous4;\
initial\
    previous4 = 0;\
always @(posedge clk) begin\
    if (pressed) begin\
        previous4 = previous4 % 1000;\
        previous4 = previous4 * 10;\
        previous4 = previous4 + key;\
        previous4 = previous4 % 10000;\
    end\
end\
assign last4 = previous4;\
   \
endmodule\
\
module ReqKeyPad(input [3:0] key,\
                 input pressed,\
                 input clk);\
   wire [15:0] last4;\
   KeyPad keypad(last4, key, pressed, clk);\
   // Add requirements R4, R5, R6, and assumption E1 here\
   assume property (key >=0 && key < 10 );\
   assert property( last4 >= 0 && last4 < 10000 );\
   assert property( pressed |-> key |=> last4%10 );\
   assert property (!pressed |-> last4 |=> last4 );\
endmodule\
\
//////////////////////////////////////////////////////////////////////\
\
module Control(output code_equal,\
               input pressed,\
               input [15:0] last4,\
               input set_code,\
               input clk);\
\
   // Add your implementation here\
reg [15:0] code;\
reg set_code_event;\
output reg code_equal;\
initial begin\
code = 0;\
code_equal =0;\
set_code_event = 0;\
end\
always @(posedge clk) begin\
   if(set_code) begin\
    set_code_event = 1;       \
    code = last4;\
    end\
    if(last4 == code && pressed && set_code_event)\
       code_equal = 1;\
    else\
        code_equal = 0;\
end\
endmodule\
\
module ReqControl(input pressed,\
                  input [15:0] last4,\
                  input set_code,\
                  input clk);\
   reg set_code_event = 0;\
   reg prev_kp = 0;     \
   wire code_equal;\
   Control control(code_equal, pressed, last4, set_code, clk);\
   always@(posedge clk) begin\
    if(set_code)\
      set_code_event <= 1;\
   end\
   always @(posedge clk) begin\
      prev_kp = pressed;\
   end\
   // Add requirements R7, R8, R9, and assumption E2 here\
   assume property( last4 >= 0 && last4 < 10000 );\
   assert property ( !set_code_event |-> !code_equal); //R7\
   assert property(code_equal |-> prev_kp); //R8\
\
endmodule\
\
//////////////////////////////////////////////////////////////////////\
\
module Lock(output unlocked,\
            input [3:0] key,\
            input pressed,\
            input set_code,\
            input clk);\
\
   wire [15:0] last4;\
   wire code_equal;\
\
   // we delay the signals pressed and set_code going to the controller\
   // by one cycle, to compensate for the delay of last4 introduced\
   // by the keypad\
\
   reg pre_pressed = 0, pre_set_code = 0;\
   always @(posedge clk) begin\
     pre_pressed = pressed;\
     pre_set_code = set_code;\
   end\
\
   KeyPad  keypad(last4, key, pressed, clk);\
   Control control(code_equal, pre_pressed, last4, pre_set_code, clk);\
\
   reg [3:0] i = 15;\
   always @(posedge clk) begin\
     if (code_equal)\
       i = 0;\
     else if (i < 15)\
       i = i + 1;\
   end\
\
   assign unlocked = code_equal || i < 9;\
\
endmodule\
\
module ReqLock(input [3:0] key,\
               input pressed,\
               input set_code,\
               input clk);\
\
   wire unlocked;\
   Lock lock(unlocked, key, pressed, set_code, clk);\
   \
   reg [3:0]counter = 0;\
   always @(posedge clk) begin\
    if (pressed)\
       counter = 0;    \
    else \
      counter <= counter+1;\
   end\
   // Add requirements R1, R2, and assumption E1 here\
    assume property (key >=0 && key < 10 );  //E1\
    assert property(!pressed&& !unlocked |=>!pressed && !unlocked |=> !unlocked); //R1\
    assert property(counter > 10 && !pressed |-> unlocked |=> !unlocked);//R2\
   // Bonus requirement:\
   // After setting the code to 1234,\
   // entering 1234 again will unlock the door\
   /*assert property(key == 1 && pressed |=>\
                    key == 2 && pressed |=>\
                    key == 3 && pressed |=>\
                    key == 4 && pressed |=>\
                    !pressed && set_code |=>\
                    key == 1 && pressed && !set_code |=>\
                    key == 2 && pressed && !set_code |=>\
                    key == 3 && pressed && !set_code |=>\
                    key == 4 && pressed && !set_code |=>\
                    ##1 unlocked);*/\
\
endmodule}